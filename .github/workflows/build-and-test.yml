name: Build and Test (qmake, Qt6)

on:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]
    tags: ['v*']

env:
  # If your project .pro filename is different, set PRO_FILE here (relative to repo root).
  # If left as "AUTO", the workflow will pick the first *.pro it finds at repo root.
  PRO_FILE: AUTO
  QT_VERSION: "6.6.0"    # change if you use another 6.x (match your .pro expectations)

jobs:
  build-linux-qt6:
    name: Build & Test (Linux x86_64, Qt6)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install basic apt build deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential pkg-config cmake git wget unzip \
            libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-good1.0-dev libopencv-dev libsdl2-dev \
            libx11-dev libxext-dev libegl1-mesa-dev libgl1-mesa-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad gstreamer1.0-libav \
            libeigen3-dev

      - name: Install Qt (Qt6) with additional modules
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          modules: 'qtserialbus qtserialport qtmultimedia'
          cache: true

      - name: Install additional Qt6 packages from apt (fallback)
        run: |
          # Install additional Qt6 packages that might not be in the action
          sudo apt-get update -y
          sudo apt-get install -y \
            qt6-base-dev qt6-base-dev-tools \
            libqt6serialbus6-dev libqt6serialport6-dev \
            libqt6multimedia6-dev libqt6multimediawidgets6-dev \
            libqt6dbus6-dev || echo "Some Qt6 packages not available, continuing..."

      - name: Add Qt bin to PATH and show qmake
        shell: bash
        run: |
          set -euo pipefail

          echo "Searching for qmake installed by install-qt-action..."

          # a few common candidate locations
          CANDIDATES=(
            "$HOME/Qt/${{ env.QT_VERSION }}/gcc_64/bin/qmake"
            "$HOME/Qt/${{ env.QT_VERSION }}/clang_64/bin/qmake"
            "$HOME/Qt/${{ env.QT_VERSION }}/bin/qmake"
            "/opt/Qt/${{ env.QT_VERSION }}/gcc_64/bin/qmake"
            "/opt/Qt/${{ env.QT_VERSION }}/bin/qmake"
            "/usr/lib/qt6/bin/qmake"
          )

          FOUND_QMAKE=""
          for c in "${CANDIDATES[@]}"; do
            if [ -x "$c" ]; then
              FOUND_QMAKE="$c"
              break
            fi
          done

          # If not found in common places, try a shallow find in $HOME
          if [ -z "$FOUND_QMAKE" ]; then
            FOUND_QMAKE=$(find "$HOME" -maxdepth 5 -type f -name 'qmake*' -executable 2>/dev/null | head -n1 || true)
          fi

          # If still not found, attempt to install the distro package as a fallback
          if [ -z "$FOUND_QMAKE" ]; then
            echo "qmake not found in Qt action install. Trying apt fallback: qt6-qmake..."
            sudo apt-get update -y
            sudo apt-get install -y qt6-qmake || true
            FOUND_QMAKE=$(command -v qmake6 || command -v qmake || true)
          fi

          if [ -z "$FOUND_QMAKE" ]; then
            echo "ERROR: qmake not found after searching common locations and apt fallback."
            echo "Home directory listing (top-level):"
            ls -la "$HOME" || true
            echo "Qt installation directory:"
            find "$HOME" -name "Qt" -type d 2>/dev/null | head -5 || true
            echo "You can inspect the full job log to see where the action installed Qt."
            exit 1
          fi

          QT_DIR=$(dirname "$FOUND_QMAKE")
          echo "Found qmake: $FOUND_QMAKE"
          echo "Adding $QT_DIR to PATH for the remainder of this job."
          # persist to PATH for following steps
          echo "$QT_DIR" >> $GITHUB_PATH

          # Also set Qt environment variables
          QT_ROOT_DIR=$(dirname "$QT_DIR")
          echo "QT_ROOT_DIR=$QT_ROOT_DIR" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$QT_ROOT_DIR" >> $GITHUB_ENV
          
          echo "qmake -v ->"
          "$FOUND_QMAKE" -v || true
          echo "which qmake -> $(which qmake || true)"
          
          # List available Qt modules
          echo "Available Qt modules:"
          "$FOUND_QMAKE" -query QT_INSTALL_LIBS || true

      - name: Install OpenCV from source (for compatibility)
        run: |
          # Create a simple OpenCV installation since your project uses it
          sudo apt-get install -y libopencv-dev libopencv-contrib-dev || \
          (
            echo "Installing OpenCV from apt failed, trying to create minimal headers..."
            sudo mkdir -p /usr/local/include/opencv4/opencv2
            sudo touch /usr/local/include/opencv4/opencv2/opencv.hpp
            sudo mkdir -p /usr/local/lib
          )

      - name: Locate .pro file (auto) and configure
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          # allow override via PRO_FILE env; if 'AUTO', pick first .pro at repo root
          if [ "${PRO_FILE}" = "AUTO" ]; then
            PRO_FILE_CAND=$(ls *.pro 2>/dev/null | head -n1 || true)
            if [ -z "$PRO_FILE_CAND" ]; then
              echo "No .pro file found at repo root. Please set PRO_FILE environment in the workflow."
              ls -la
              exit 1
            fi
            PRO_FILE="$PRO_FILE_CAND"
          else
            PRO_FILE="${PRO_FILE}"
          fi
          echo "Using PRO file: $PRO_FILE"

          mkdir -p build
          cd build
          
          # Set up environment for qmake
          export QT_SELECT=qt6
          
          # qmake expects path to .pro relative to current dir
          qmake "../${PRO_FILE}" || ( 
            echo "qmake failed, trying with explicit Qt6 qmake..." 
            qmake6 "../${PRO_FILE}" 2>/dev/null || (
              echo "Both qmake and qmake6 failed. Checking qmake output:"
              qmake -query || true
              echo "Content of .pro file:"
              cat "../${PRO_FILE}" || true
              exit 1
            )
          )

      - name: Build
        shell: bash
        run: |
          cd build
          make -j$(nproc) || ( 
            echo "Build failed. Checking for common issues..."
            echo "Generated Makefile exists:" 
            ls -la Makefile || echo "No Makefile found"
            echo "Build failed" 
            exit 1 
          )

      - name: Run unit/integration tests (if present)
        shell: bash
        run: |
          cd build
          # test binary expected at build/tests/tests (default from tests/tests.pro)
          if [ -x "./tests/tests" ]; then
            echo "Running tests..."
            ./tests/tests || ( echo "Tests failed" && exit 1 )
          else
            echo "No tests/tests binary found â€” skipping test run."
            echo "Available executables in build directory:"
            find . -type f -executable -name "*" | head -10 || true
          fi

      - name: Upload artifacts (on tag push only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: myapp-binaries
          path: |
            build/src/*
            build/tests/*